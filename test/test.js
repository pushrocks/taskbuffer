"use strict";
/// <reference path="../ts/typings/main.d.ts" />
var taskbuffer = require("../dist/index");
var should = require("should");
var plugins = {
    q: require("q")
};
// setup some testData to work with
var testTask;
var testTaskFunction = function () {
    var done = plugins.q.defer();
    console.log("main function executed!");
    done.resolve();
    return done.promise;
};
var testPreTask = new taskbuffer.Task({
    taskFunction: function () {
        console.log("preTask executed");
    },
    preTask: testTask
});
describe("taskbuffer", function () {
    describe(".Task", function () {
        it("new Task() should return a new task", function () {
            testTask = new taskbuffer.Task({ taskFunction: testTaskFunction, preTask: testPreTask });
        });
        it("testTask should be and instance of Task", function () {
            testTask.should.be.instanceof(taskbuffer.Task);
        });
        it("testTask.idle is true", function () {
            if (!testTask.idle) {
                throw new Error("testTask.idle is not true");
            }
        });
        it("testTask.running is type boolean and initially false", function () {
            testTask.running.should.be.type("boolean");
            testTask.running.should.be.false();
        });
        it("testTask.trigger() should return Promise", function () {
            testTask.trigger().should.be.Promise();
        });
        it("testTask.trigger() returned Promise should be fullfilled", function (done) {
            testTask.trigger()
                .then(done);
        });
        it("should run a task without pre and afterTask", function (done) {
            var localTestTask = new taskbuffer.Task({ taskFunction: testTaskFunction });
            localTestTask.trigger().then(done);
        });
    });
    describe("Taskchain", function () {
        var testTaskchain;
        var testTaskArray = [
            new taskbuffer.Task({
                name: "task1",
                taskFunction: function () {
                    var done = plugins.q.defer();
                    setTimeout(done.resolve, 2000);
                    return done.promise;
                }
            }),
            new taskbuffer.Task({
                name: "task2",
                taskFunction: function () {
                    var done = plugins.q.defer();
                    setTimeout(done.resolve, 2000);
                    return done.promise;
                }
            }),
        ];
        it("should run tasks in sequence", function (done) {
            this.timeout(5000);
            testTaskchain = new taskbuffer.Taskchain({
                name: "Taskchain1",
                taskArray: testTaskArray
            });
            testTaskchain.trigger().then(done);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUM7Z0JBQ2hCLElBQUksRUFBQyxPQUFPO2dCQUNaLFlBQVksRUFBQztvQkFDVCxJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUM3QixVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxJQUFJLENBQUMsQ0FBQztvQkFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ3hCLENBQUM7YUFDSixDQUFDO1lBQ0YsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUNoQixJQUFJLEVBQUMsT0FBTztnQkFDWixZQUFZLEVBQUU7b0JBQ1YsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDN0IsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUN4QixDQUFDO2FBQ0osQ0FBQztTQUNMLENBQUM7UUFDRixFQUFFLENBQUMsOEJBQThCLEVBQUMsVUFBUyxJQUFJO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsYUFBYSxHQUFHLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQztnQkFDckMsSUFBSSxFQUFDLFlBQVk7Z0JBQ2pCLFNBQVMsRUFBQyxhQUFhO2FBQzFCLENBQUMsQ0FBQztZQUNILGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHMvdHlwaW5ncy9tYWluLmQudHNcIiAvPlxyXG5pbXBvcnQgdGFza2J1ZmZlciA9IHJlcXVpcmUoXCIuLi9kaXN0L2luZGV4XCIpO1xyXG5sZXQgc2hvdWxkID0gcmVxdWlyZShcInNob3VsZFwiKTtcclxubGV0IHBsdWdpbnMgPSB7XHJcbiAgICBxOiByZXF1aXJlKFwicVwiKVxyXG59XHJcblxyXG4vLyBzZXR1cCBzb21lIHRlc3REYXRhIHRvIHdvcmsgd2l0aFxyXG5sZXQgdGVzdFRhc2s6dGFza2J1ZmZlci5UYXNrO1xyXG5sZXQgdGVzdFRhc2tGdW5jdGlvbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICBsZXQgZG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xyXG4gICAgY29uc29sZS5sb2coXCJtYWluIGZ1bmN0aW9uIGV4ZWN1dGVkIVwiKVxyXG4gICAgZG9uZS5yZXNvbHZlKCk7XHJcbiAgICByZXR1cm4gZG9uZS5wcm9taXNlO1xyXG59XHJcbmxldCB0ZXN0UHJlVGFzayA9IG5ldyB0YXNrYnVmZmVyLlRhc2soe1xyXG4gICAgdGFza0Z1bmN0aW9uOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJwcmVUYXNrIGV4ZWN1dGVkXCIpO1xyXG4gICAgfSxcclxuICAgIHByZVRhc2s6dGVzdFRhc2tcclxufSk7XHJcblxyXG5kZXNjcmliZShcInRhc2tidWZmZXJcIixmdW5jdGlvbigpe1xyXG4gICAgZGVzY3JpYmUoXCIuVGFza1wiLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaXQoXCJuZXcgVGFzaygpIHNob3VsZCByZXR1cm4gYSBuZXcgdGFza1wiLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHRlc3RUYXNrID0gbmV3IHRhc2tidWZmZXIuVGFzayh7dGFza0Z1bmN0aW9uOnRlc3RUYXNrRnVuY3Rpb24scHJlVGFzazp0ZXN0UHJlVGFza30pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0KFwidGVzdFRhc2sgc2hvdWxkIGJlIGFuZCBpbnN0YW5jZSBvZiBUYXNrXCIsZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdGVzdFRhc2suc2hvdWxkLmJlLmluc3RhbmNlb2YodGFza2J1ZmZlci5UYXNrKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpdChcInRlc3RUYXNrLmlkbGUgaXMgdHJ1ZVwiLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmICghdGVzdFRhc2suaWRsZSl7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0ZXN0VGFzay5pZGxlIGlzIG5vdCB0cnVlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0KFwidGVzdFRhc2sucnVubmluZyBpcyB0eXBlIGJvb2xlYW4gYW5kIGluaXRpYWxseSBmYWxzZVwiLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHRlc3RUYXNrLnJ1bm5pbmcuc2hvdWxkLmJlLnR5cGUoXCJib29sZWFuXCIpO1xyXG4gICAgICAgICAgICB0ZXN0VGFzay5ydW5uaW5nLnNob3VsZC5iZS5mYWxzZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0KFwidGVzdFRhc2sudHJpZ2dlcigpIHNob3VsZCByZXR1cm4gUHJvbWlzZVwiLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHRlc3RUYXNrLnRyaWdnZXIoKS5zaG91bGQuYmUuUHJvbWlzZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGl0KFwidGVzdFRhc2sudHJpZ2dlcigpIHJldHVybmVkIFByb21pc2Ugc2hvdWxkIGJlIGZ1bGxmaWxsZWRcIixmdW5jdGlvbihkb25lKXtcclxuICAgICAgICAgICAgdGVzdFRhc2sudHJpZ2dlcigpXHJcbiAgICAgICAgICAgICAgICAudGhlbihkb25lKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpdChcInNob3VsZCBydW4gYSB0YXNrIHdpdGhvdXQgcHJlIGFuZCBhZnRlclRhc2tcIixmdW5jdGlvbihkb25lKXtcclxuICAgICAgICAgICAgbGV0IGxvY2FsVGVzdFRhc2sgPSBuZXcgdGFza2J1ZmZlci5UYXNrKHt0YXNrRnVuY3Rpb246dGVzdFRhc2tGdW5jdGlvbn0pO1xyXG4gICAgICAgICAgICBsb2NhbFRlc3RUYXNrLnRyaWdnZXIoKS50aGVuKGRvbmUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBkZXNjcmliZShcIlRhc2tjaGFpblwiLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgbGV0IHRlc3RUYXNrY2hhaW47XHJcbiAgICAgICAgbGV0IHRlc3RUYXNrQXJyYXkgPSBbXHJcbiAgICAgICAgICAgIG5ldyB0YXNrYnVmZmVyLlRhc2soe1xyXG4gICAgICAgICAgICAgICAgbmFtZTpcInRhc2sxXCIsXHJcbiAgICAgICAgICAgICAgICB0YXNrRnVuY3Rpb246ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZG9uZS5yZXNvbHZlLDIwMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lLnByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBuZXcgdGFza2J1ZmZlci5UYXNrKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6XCJ0YXNrMlwiLFxyXG4gICAgICAgICAgICAgICAgdGFza0Z1bmN0aW9uOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkb25lID0gcGx1Z2lucy5xLmRlZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChkb25lLnJlc29sdmUsMjAwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmUucHJvbWlzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpdChcInNob3VsZCBydW4gdGFza3MgaW4gc2VxdWVuY2VcIixmdW5jdGlvbihkb25lKXtcclxuICAgICAgICAgICAgdGhpcy50aW1lb3V0KDUwMDApO1xyXG4gICAgICAgICAgICB0ZXN0VGFza2NoYWluID0gbmV3IHRhc2tidWZmZXIuVGFza2NoYWluKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6XCJUYXNrY2hhaW4xXCIsXHJcbiAgICAgICAgICAgICAgICB0YXNrQXJyYXk6dGVzdFRhc2tBcnJheVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGVzdFRhc2tjaGFpbi50cmlnZ2VyKCkudGhlbihkb25lKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufSk7Il19
