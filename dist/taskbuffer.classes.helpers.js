"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./taskbuffer.plugins");
var taskbuffer_classes_1 = require("./taskbuffer.classes");
exports.emptyTaskFunction = function () {
    var done = plugins.Q.defer();
    done.resolve();
    return done.promise;
};
exports.isTask = function (taskArg) {
    if (taskArg instanceof taskbuffer_classes_1.Task
        && typeof taskArg.task === "function") {
        return true;
    }
    else {
        return false;
    }
};
exports.isTaskTouched = function (taskArg, touchedTasksArray) {
    var result = false;
    for (var keyArg in touchedTasksArray) {
        if (taskArg === touchedTasksArray[keyArg]) {
            result = true;
        }
    }
    return result;
};
exports.runTask = function (taskArg, optionsArg) {
    if (optionsArg === void 0) { optionsArg = { touchedTasksArray: [] }; }
    var done = plugins.Q.defer();
    exports.updateTaskStatus(taskArg, "running");
    done.promise.then(function () { exports.updateTaskStatus(taskArg, "idle"); });
    var localDeferred = plugins.Q.defer();
    var touchedTasksArray;
    if (optionsArg.touchedTasksArray) {
        touchedTasksArray = optionsArg.touchedTasksArray;
    }
    else {
        touchedTasksArray = [];
    }
    touchedTasksArray.push(taskArg);
    localDeferred.promise
        .then(function () {
        if (taskArg.preTask && !exports.isTaskTouched(taskArg.preTask, touchedTasksArray)) {
            return exports.runTask(taskArg.preTask, { touchedTasksArray: touchedTasksArray });
        }
        else {
            var done2 = plugins.Q.defer();
            done2.resolve();
            return done2.promise;
        }
    })
        .then(function () {
        return taskArg.task();
    })
        .then(function () {
        if (taskArg.afterTask && !exports.isTaskTouched(taskArg.afterTask, touchedTasksArray)) {
            return exports.runTask(taskArg.afterTask, { touchedTasksArray: touchedTasksArray });
        }
        else {
            var done2 = plugins.Q.defer();
            done2.resolve();
            return done2.promise;
        }
    })
        .then(function () {
        done.resolve();
    });
    localDeferred.resolve();
    return done.promise;
};
exports.runBufferedTask = function (taskArg) {
    var recursiveBufferRunner = function () {
        if (taskArg.bufferCounter > 0) {
            taskArg.bufferCounter--;
            exports.runTask(taskArg)
                .then(recursiveBufferRunner);
        }
    };
};
exports.updateTaskStatus = function (taskArg, statusArg) {
    switch (statusArg) {
        case "running":
            taskArg.running = true;
            taskArg.idle = false;
            break;
        case "idle":
            taskArg.running = false;
            taskArg.idle = true;
            break;
        default:
            throw new Error("status not recognised");
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,
